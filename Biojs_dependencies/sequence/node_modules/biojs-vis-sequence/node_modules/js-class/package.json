{
  "name": "js-class",
  "description": "Define classes in Javascript",
  "version": "0.0.2",
  "author": {
    "name": "Yisui Hu",
    "email": "easeway@gmail.com"
  },
  "keywords": [
    "class",
    "object-oriented",
    "OOP"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/easeway/js-class"
  },
  "main": "./class",
  "scripts": {
    "test": "mocha class-test.js",
    "build": "uglifyjs class.js --comments --wrap -m -o js-class.min.js"
  },
  "devDependencies": {
    "mocha": "1.10.0",
    "uglify-js": "2.3.6"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/evo-cloud/elements/raw/master/LICENSE"
    }
  ],
  "readme": "# Define Classes in Javascript\n\nThis is a simple module providing a simple `Class` function to simplify class definition in Javascript.\n\n## Install\n\nFor Node.js\n\n```bash\nnpm install js-class\n```\n\nFor browser, use `bower`\n\n```bash\nbower install js-class\n```\n\nTo rebuild `js-class.min.js`, type:\n\n```bash\nnpm install\nnpm run-script build\n```\n\n## How to Use\n\nWith Node.js:\n\n```javascript\nvar Class = require('js-class');\n```\n\nIn browser, just include `js-class.min.js`\n\n#### Prototype\n```javascript\nClass(baseClass, prototype, options);\n```\n\n#### Parameters\n\n- `baseClass`: baseClass type, optional, default is Object;\n- `prototype`: the prototype for new class;\n- `options`: other options like _implements_ and _statics_, see details below.\n\n#### Returns\n\nThe newly defined class.\n\n#### Details\n\nA simple and quick sample:\n\n```javascript\nvar Class = require('js-class');\n\nvar MyClass = Class({\n  constructor: function (value) {\n    // this is the constructor\n    this._value = value;\n  },\n    \n  print: function () {\n    console.log(this._value);\n  },\n  \n  // getter/setter is supported\n  get value () {\n    return this._value;\n  },\n  \n  set value (value) {\n    if (!isFinite(value)) {\n      throw new Error('Bad Value');\n    }\n    this._value = value;\n  }\n});\n\nvar myObject = new MyClass(1);\nmyObject.print(); // get 1\nmyObject.value = myObject.value + 100;\nmyObject.print(); // get 101\n```\n\nA simple inheritance sample:\n\n```javascript\nvar BaseClass = Class({\n  constructor: function (value) {\n    this.value = value;\n  },\n  \n  print: function () {\n    console.log('BaseClass: %d', this.value);\n  }\n});\n\nvar SubClass = Class(BaseClass, {\n  constructor: function (val1, val2) {\n    BaseClass.prototype.constructor.call(this, val1 + val2);\n  },\n  \n  print: function () {\n    console.log('SubClass');\n    BaseClass.prototype.print.call(this);\n  }\n});\n\nvar myObject = new SubClass(1, 2);\nmyObject instanceof SubClass;   // true\nmyObject instanceof BaseClass;  // true\nmyObject.print();\n// get\n// SubClass\n// BaseClass: 3\n```\n\nMultiple inheritance with _implements_\n\n```javascript\nvar ActiveBuffer = Class(Buffer, {\n  // override Clearable\n  clear: function () {\n    // TODO I hate to be cleared\n    this.emit('cleared');\n  }\n}, {\n  implements: [EventEmitter, Clearable]\n});\n\nvar buffer = new ActiveBuffer().on('cleared', function () { console.log('CLEARED'); });\nbuffer.clear();\n\nbuffer instanceof Buffer; // true\nbuffer instanceof EventEmitter; // false\nbuffer instanceof Clearable;  // false\n```\n\nStatic members\n\n```javascript\nvar Singleton = Class({\n  constructor: function () {\n    // ...\n  },\n  \n  work: function () {\n    // ...\n  }\n}, {\n  statics: {\n    get instance () {\n      if (!Singleton._instance) {\n        Singleton._instance = new Singleton();\n      }\n      return Singleton._instance;\n    }\n  }\n});\n\nSingleton.instance.work();\n```\n\n### Type Information\n\nThe keyword `instanceof` can be used to check the type inherited directly. But it doesn't work with `implemented` types.\nUse `Class.is` for all the cases:\n\n```javascript\nClass.is(object).typeOf(Type)\n```\n\nWe also have two aliases:\n\n```javascript\nClass.is(object).a(Type)\nClass.is(object).an(Object)\n```\n\n## License\n\nMIT/X11 License",
  "readmeFilename": "README.md",
  "_id": "js-class@0.0.2",
  "dist": {
    "shasum": "56c33db955fab52caef9079af73641ba4f981dbf",
    "tarball": "http://registry.npmjs.org/js-class/-/js-class-0.0.2.tgz"
  },
  "_from": "js-class@0.0.2",
  "_npmVersion": "1.2.14",
  "_npmUser": {
    "name": "easeway",
    "email": "easeway@gmail.com"
  },
  "maintainers": [
    {
      "name": "easeway",
      "email": "easeway@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "56c33db955fab52caef9079af73641ba4f981dbf",
  "_resolved": "https://registry.npmjs.org/js-class/-/js-class-0.0.2.tgz",
  "bugs": {
    "url": "https://github.com/easeway/js-class/issues"
  },
  "homepage": "https://github.com/easeway/js-class"
}
